#!/usr/bin/perl -w

use strict;

use File::Find qw( find );
use Getopt::Long;

sub usage {
    my($status, @msg) = @_;
    my $fh = $status == 0 ? \*STDOUT : \*STDERR;
    print $fh @msg, "\n" if @msg;
    print $fh <<EOF;
Usage:
  list-java-breakpoints
Scan the CLASSPATH for breakpoints, writing them to STDOUT in a form that
is understood by rlwrap-jdb.
EOF
    exit($status);
}

GetOptions(
    help            => sub { usage(0) },
) or usage(1);

usage(1, "CLASSPATH environment variable not set") if !defined($ENV{CLASSPATH});

my(@classpath) = split(':', $ENV{CLASSPATH});
my @classes = map { list_classes($_) } @classpath;
my @breakpoints = list_breakpoints(@classes);
foreach (sort(@breakpoints)) {
    print "$_\n";
}
exit;

sub list_classes {
    my($classpath_entry) = @_;
    $classpath_entry =~ /^$/
        ? () :
    -d $classpath_entry
        ? list_classes_dir($classpath_entry) :
    -f $classpath_entry && $classpath_entry =~ /\.jar$/
        ? list_classes_jar($classpath_entry)
        : warn("unrecognized classpath entry: $classpath_entry\n");
}
sub list_classes_dir {
    my($dir) = @_;
    my(@files);
    find(sub { push(@files, $File::Find::name) if /\.class$/ }, $dir);
    map { s/$dir\/?//; s/\.class$//; s/\//./g; $_ } @files
}
my $no_archive_zip;
sub list_classes_jar {
    my($jar) = @_;
    return if $no_archive_zip;
    eval { require Archive::Zip };
    if ($@ ne '') {
        $no_archive_zip = 1;
        warn "Skipping JARs; install the Archive::Zip Perl module to look into JARs.\n";
        return;
    }
    my $zip = Archive::Zip->new($jar) or die;
    map { s/\.class$//; s/\//./g; $_ }
        grep { /\.class$/ } $zip->memberNames();
}

sub list_breakpoints {
    my(@classes) = @_;
    open JAVAP, '-|', qw( javap -p ), @classes or die $!;
    my(@breakpoints, $class);
    while (<JAVAP>) {
        if      (/\bclass (\S+)/) {
            $class = $1;
        } elsif (/\b(\S+)\((.*?)\);/) {
            my $method = $1;
            my($args) = $2;
            $args =~ s/ //g;
            $method = '<init>' if $method eq $class;
            push(@breakpoints, "$class.$method($args)");
        }
    }
    @breakpoints
}
